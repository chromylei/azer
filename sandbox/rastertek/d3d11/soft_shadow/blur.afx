
uniform float screen_width;
uniform float screen_height;
uniform sampler2D tex;
uniform float weights[7];

struct VsOutput {
  vec4 __afx_position;
  vec2 texcoord;
  vec2 texel;
};

VsOutput vs_main(vec4 position, vec2 texcoord) {
  VsOutput o;
  o.__afx_position = position;
  o.texcoord = texcoord;
  o.texel.x = 1.0 / screen_width;
  o.texel.y = 1.0 / screen_height;
  return o;
}

vec4 ps_main(VsOutput o) {
  float normalize_scale = 0.0;
  vec3 color = vec3(0, 0, 0);

  for (int i = 0; i < 7; ++i) {
    for (int j = 0; j < 7; ++j) {
      vec2 texcoord;
      texcoord.x = o.texcoord.x + (i - 3) * o.texel.x;
      texcoord.y = o.texcoord.y + (j - 3) * o.texel.y;
      vec3 v = texture2D(tex, texcoord).xyz;
      color += v * weights[i];
      color += v * weights[j];
      normalize_scale += weights[i];
      normalize_scale += weights[j];
    }
  }

  return vec4(color / normalize_scale, 1);
}
